// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    id, content, media_type, media_urns, scheduled_time, visibility, account_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, content, media_type, media_urns, scheduled_time, visibility, account_id, created_at
`

type CreatePostParams struct {
	ID            string
	Content       string
	MediaType     string
	MediaUrns     []byte
	ScheduledTime pgtype.Timestamptz
	Visibility    string
	AccountID     int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Content,
		arg.MediaType,
		arg.MediaUrns,
		arg.ScheduledTime,
		arg.Visibility,
		arg.AccountID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.MediaType,
		&i.MediaUrns,
		&i.ScheduledTime,
		&i.Visibility,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, content, media_type, media_urns, scheduled_time, visibility, account_id, created_at FROM posts
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.MediaType,
		&i.MediaUrns,
		&i.ScheduledTime,
		&i.Visibility,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, content, media_type, media_urns, scheduled_time, visibility, account_id, created_at FROM posts
ORDER BY created_at DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.MediaType,
			&i.MediaUrns,
			&i.ScheduledTime,
			&i.Visibility,
			&i.AccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsPaginated = `-- name: ListPostsPaginated :many
SELECT id, content, media_type, media_urns, scheduled_time, visibility, account_id, created_at FROM posts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPostsPaginated(ctx context.Context, arg ListPostsPaginatedParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.MediaType,
			&i.MediaUrns,
			&i.ScheduledTime,
			&i.Visibility,
			&i.AccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET content = $2,
    media_type = $3,
    media_urns = $4,
    scheduled_time = $5,
    visibility = $6,
    account_id = $7
WHERE id = $1
RETURNING id, content, media_type, media_urns, scheduled_time, visibility, account_id, created_at
`

type UpdatePostParams struct {
	ID            string
	Content       string
	MediaType     string
	MediaUrns     []byte
	ScheduledTime pgtype.Timestamptz
	Visibility    string
	AccountID     int32
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Content,
		arg.MediaType,
		arg.MediaUrns,
		arg.ScheduledTime,
		arg.Visibility,
		arg.AccountID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.MediaType,
		&i.MediaUrns,
		&i.ScheduledTime,
		&i.Visibility,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}
