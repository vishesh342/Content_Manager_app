// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: platforms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlatform = `-- name: CreatePlatform :one
INSERT INTO platforms (
platform_name, api_endpoint, created_at
) VALUES (
  $1, $2, $3
)
RETURNING id, platform_name, api_endpoint, created_at
`

type CreatePlatformParams struct {
	PlatformName string
	ApiEndpoint  string
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) CreatePlatform(ctx context.Context, arg CreatePlatformParams) (Platform, error) {
	row := q.db.QueryRow(ctx, createPlatform, arg.PlatformName, arg.ApiEndpoint, arg.CreatedAt)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.PlatformName,
		&i.ApiEndpoint,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlatform = `-- name: DeletePlatform :exec
DELETE FROM platforms
WHERE platform_name = $1
`

func (q *Queries) DeletePlatform(ctx context.Context, platformName string) error {
	_, err := q.db.Exec(ctx, deletePlatform, platformName)
	return err
}

const getPlatform = `-- name: GetPlatform :one
SELECT id, platform_name, api_endpoint, created_at FROM platforms
WHERE platform_name = $1 LIMIT 1
`

func (q *Queries) GetPlatform(ctx context.Context, platformName string) (Platform, error) {
	row := q.db.QueryRow(ctx, getPlatform, platformName)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.PlatformName,
		&i.ApiEndpoint,
		&i.CreatedAt,
	)
	return i, err
}

const updatePlatform = `-- name: UpdatePlatform :exec
UPDATE platforms
SET  api_endpoint= $2
WHERE platform_name = $1
`

type UpdatePlatformParams struct {
	PlatformName string
	ApiEndpoint  string
}

func (q *Queries) UpdatePlatform(ctx context.Context, arg UpdatePlatformParams) error {
	_, err := q.db.Exec(ctx, updatePlatform, arg.PlatformName, arg.ApiEndpoint)
	return err
}
