// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: social_accounts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO social_accounts (
username, platform_username, access_token, refresh_token, expires_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, username, platform_username, access_token, refresh_token, expires_at, created_at, updated_at
`

type CreateAccountParams struct {
	Username         string
	PlatformUsername string
	AccessToken      string
	RefreshToken     pgtype.Text
	ExpiresAt        pgtype.Timestamptz
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (SocialAccount, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Username,
		arg.PlatformUsername,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i SocialAccount
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PlatformUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM social_accounts
WHERE username = $1 AND platform_username = $2
`

type DeleteAccountParams struct {
	Username         string
	PlatformUsername string
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.Username, arg.PlatformUsername)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, platform_username, access_token, refresh_token, expires_at, created_at, updated_at FROM social_accounts
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, username string) (SocialAccount, error) {
	row := q.db.QueryRow(ctx, getAccount, username)
	var i SocialAccount
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PlatformUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE social_accounts
SET  access_token= $3,
     refresh_token = $4,
     expires_at = $5,
     updated_at = $6
WHERE username = $1 AND platform_username = $2
`

type UpdateAccountParams struct {
	Username         string
	PlatformUsername string
	AccessToken      string
	RefreshToken     pgtype.Text
	ExpiresAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.Username,
		arg.PlatformUsername,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.UpdatedAt,
	)
	return err
}
